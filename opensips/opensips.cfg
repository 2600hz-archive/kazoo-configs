######################################################################
## Core Parameters
######################################################################
# chroot=
# group="opensips"
# user="opensips"
# dbversion_table=
disable_core_dump=no
max_while_loops=100
maxbuffer=262144
memdump=3
memlog=2
# open_files_limit=2048
server_signature=no
server_header="Server: 2600hz"
user_agent_header="User-Agent: 2600hz"

######################################################################
## Core Fork Parameters
######################################################################
fork=yes
children=8
tcp_children=8

######################################################################
## Core Logging Parameters
######################################################################
debug=3
sip_warning=0
log_stderror=no
log_facility=LOG_LOCAL0
log_name="opensips"

######################################################################
## Aliases
######################################################################
auto_aliases=no
alias=localhost
alias=localhost.localdomain

######################################################################
## Connectivity
######################################################################
listen=udp:eth0:5060
# listen=udp:eth1:5060
tos=IPTOS_LOWDELAY
# advertised_address=174.129.131.38
# advertised_port=5060
mcast_loopback=no
mcast_ttl=1
mhomed=0
# tcp_accept_aliases
tcp_connect_timeout=3
tcp_connection_lifetime=120
tcp_max_connections=2048
# tcp_poll_method=select

######################################################################
## DNS
######################################################################
dns=no
dns_retr_time=1
dns_retr_no=3
# dns_servers_no=2
dns_try_ipv6=no
disable_dns_blacklist=yes
disable_dns_failover=no
dns_use_search_list=no
rev_dns=no

######################################################################
## SIP
######################################################################
check_via=0
#! disable_503_translation=no
disable_stateless_fwd=no
disable_tcp=no
# disable_tls=no
#! reply_to_via=1

######################################################################
## TLS
######################################################################
# disable_tls=no
# listen=tls:your_IP:5061
# tls_verify_server=1
# tls_verify_client=1
# tls_require_client_certificate=0
# tls_method=TLSv1
# tls_certificate="/usr/local/etc/opensips/tls/user/user-cert.pem"
# tls_private_key="/usr/local/etc/opensips/tls/user/user-privkey.pem"
# tls_ca_list="/usr/local/etc/opensips/tls/user/user-calist.pem"

######################################################################
## Destination Blacklist
######################################################################
# dst_blacklist=gw:{( tcp , 192.168.2.100 , 5060 , "" ),( any , 192.168.2.101 , 0 , "" )}
# dst_blacklist=net_filter2:{ !( any , 192.168.30.0/255.255.255.0 , 0 , "" )}

######################################################################
## Attribute Value Pairs
######################################################################
# avp_aliases="uuid=I:660;email=s:email_addr;fwd=i:753"

######################################################################
## Module Loading
######################################################################
mpath="/usr/lib64/opensips/modules/"
loadmodule "memcached.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "dialog.so"
loadmodule "maxfwd.so"
loadmodule "rr.so"
loadmodule "path.so"
loadmodule "uri.so"
loadmodule "textops.so"
loadmodule "usrloc.so"
loadmodule "nathelper.so"
loadmodule "nat_traversal.so"
loadmodule "dispatcher.so"
loadmodule "mi_fifo.so"
# loadmodule "mi_datagram.so"
# loadmodule "xlog.so"

######################################################################
## Memcached Module Parameters
######################################################################
modparam("memcached", "server", "callid_hash = 127.0.0.1:11211")

######################################################################
## Stateless UA Module Parameters
######################################################################
modparam("sl", "enable_stats", 1)

######################################################################
## SIP Transaction UA Module Parameters
######################################################################
modparam("tm", "fr_timer", 2)
modparam("tm", "fr_inv_timer", 60)
# modparam("tm", "wt_timer", 5)
# modparam("tm", "delete_timer", 2)
# modparam("tm", "T1_timer", 500)
# modparam("tm", "T2_timer", 4000)
# modparam("tm", "ruri_matching", 1)
# modparam("tm", "via1_matching", 1)
# modparam("tm", "unix_tx_timeout", 2)
modparam("tm", "restart_fr_on_each_reply", 1)
# modparam("tm", "fr_timer_avp", "$avp(i:24)")
# modparam("tm", "fr_inv_timer_avp", "$avp(i:25)")
# modparam("tm", "tw_append",
#    "test: ua=$hdr(User-Agent) ;avp=$avp(i:10);$rb;time=$Ts")
modparam("tm", "pass_provisional_replies", 1)
# modparam("tm", "syn_branch", 1)
# modparam("tm", "onreply_avp_mode", 0)
# modparam("tm", "disable_6xx_block", 0)
# modparam("tm", "enable_stats", 1)
# modparam("tm", "minor_branch_flag", 3)

######################################################################
## Max Forward Module Parameters
######################################################################
modparam("maxfwd", "max_limit", 30)

######################################################################
## Record Route Module Parameters
######################################################################
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_double_rr", 0)
modparam("rr", "add_username", 0)

######################################################################
## Path Module Parameters
######################################################################
modparam("path", "use_received", 1)

######################################################################
## URI Module Parameters
######################################################################
# modparam("uri", "aaa_url", "radius:/etc/radiusclient-ng/radiusclient.conf")
modparam("uri", "use_sip_uri_host", 0)
modparam("uri", "use_uri_table", 0)
modparam("uri", "service_type", 10)
modparam("uri", "use_domain", 1)
modparam("uri", "use_uri_table", 0)
# modparam("uri", "db_url", "mysql://username:password@localhost/opensips")
# modparam("uri", "db_table", "uri")
# modparam("uri", "user_column", "username")
# modparam("uri", "domain_column", "domain")
# modparam("uri", "uriuser_column", "uri_user")

######################################################################
## User Location Module Parameters
######################################################################
modparam("usrloc", "nat_bflag", 6)
modparam("usrloc", "use_domain", 1)
modparam("usrloc", "desc_time_order", 0)
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "matching_mode", 0)
modparam("usrloc", "cseq_delay", 20)
modparam("usrloc", "hash_size", 9)
modparam("usrloc", "db_mode", 0)
# modparam("usrloc", "db_url", "dbdriver://username:password@dbhost/dbname")
modparam("usrloc", "fetch_rows", 2000)
modparam("usrloc", "user_column", "username")
modparam("usrloc", "domain_column", "domain")
modparam("usrloc", "contact_column", "contact")
modparam("usrloc", "expires_column", "expires")
modparam("usrloc", "q_column", "q")
modparam("usrloc", "callid_column", "callid")
modparam("usrloc", "cseq_column", "cseq")
modparam("usrloc", "methods_column", "methods")
modparam("usrloc", "flags_column", "flags")
modparam("usrloc", "cflags_column", "cflags")
modparam("usrloc", "user_agent_column", "user_agent")
modparam("usrloc", "received_column", "received")
modparam("usrloc", "socket_column", "socket")
modparam("usrloc", "path_column", "path")

######################################################################
## Nathelper Module Parameters
######################################################################
# modparam("nathelper", "rtpproxy_sock", "udp:127.0.0.1:7890")
# modparam("nathelper", "natping_interval", 30)
# modparam("nathelper", "ping_nated_only", 1)
# modparam("nathelper", "natping_processes", 3)
# modparam("nathelper", "sipping_bflag", 7)
# modparam("nathelper", "sipping_from", "sip:sipcheck@184.106.157.174")
# modparam("nathelper", "sipping_method", "INFO")

######################################################################
## NAT Traversal Module Parameters
######################################################################
modparam("nat_traversal", "keepalive_interval", 60)
modparam("nat_traversal", "keepalive_method", "OPTIONS")
modparam("nat_traversal", "keepalive_from", "sip:keepalive@ping.sip.2600hz.com")
modparam("nat_traversal", "keepalive_state_file", "/tmp/opensips_keepalive_state")

######################################################################
## Dispatcher Module Parameters
######################################################################
modparam("dispatcher", "list_file", "/etc/opensips/dispatcher.list")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "use_default", 0)
modparam("dispatcher", "force_dst", 1)
modparam("dispatcher", "dst_avp", "$avp(i:271)")
modparam("dispatcher", "attrs_avp", "$avp(i:272)")
modparam("dispatcher", "grp_avp", "$avp(i:273)")
modparam("dispatcher", "cnt_avp", "$avp(i:274)")
modparam("dispatcher", "hash_pvar", "$avp(i:273)")
# modparam("dispatcher", "setid_pvar", "$var(setid)")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:sipcheck@184.106.157.174:5060")
modparam("dispatcher", "ds_ping_interval", 10)
# modparam("dispatcher", "ds_ping_sock", "udp:10.80.25.168:5080")
modparam("dispatcher", "ds_probing_threshhold", 3)
modparam("dispatcher", "ds_probing_mode", 0)
modparam("dispatcher", "options_reply_codes", "501, 403, 404, 400")

######################################################################
## MI-FIFO Module Parameters
######################################################################
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")

######################################################################
## MI-Datagram Module Parameters
######################################################################
# modparam("mi_datagram", "socket_name", "udp:10.180.180.230:8889")
# modparam("mi_datagram", "children_count", 1)
# modparam("mi_datagram", "unix_socket_mode", 0600)
# modparam("mi_datagram", "unix_socket_group", "root")
# modparam("mi_datagram", "unix_socket_user", "root")
# modparam("mi_datagram", "socket_timeout", 2000)
# modparam("mi_datagram", "reply_indent", "\t")

######################################################################
## XLog Module Parameters
######################################################################
# modparam("xlog", "buf_size", 4096)
# modparam("xlog", "force_color", 0)

######################################################################
## Multiple Module Parameters
######################################################################


######################################################################
## Main Request Routing
######################################################################
route
{
    xlog("L_INFO", "$ci|start|recieved $oP request $rm $ou");
    xlog("L_INFO", "$ci|log|source $si:$sp");
    xlog("L_INFO", "$ci|log|from $fu");
    xlog("L_INFO", "$ci|log|to $tu");

    if (!mf_process_maxfwd_header("10"))
    {
        xlog("L_WARN", "$ci|end|to many hops");

        sl_send_reply("483", "We refuse to process this endless imbroglio");

        exit;
    }

    if (src_ip==myself) 
    {
        xlog("L_WARN", "$ci|end|sourced from this server");

        exit;
    }

    if (is_method("OPTIONS|SUBSCRIBE"))
    {
        xlog("L_NOTICE", "$ci|end|unsupported method");

        sl_send_reply("503", "Rawr!!");

        exit;
    }


    if (ds_is_in_list("$si", "$sp", "1") || ds_is_in_list("$si", "$sp", "2"))
    {           
        xlog("L_INFO", "$ci|log|originated from internal source");

        # Flag 26 marks the source as a interal server   
        setflag(26);
    }
    else
    {
        xlog("L_INFO", "$ci|log|originated from external source");
    }

    if (has_totag())
    {
        # sequential request within a dialog should
        # take the path determined by record-routing
        if (loose_route())
        {
            append_hf("P-hint: rr-enforced\r\n");

            if (isflagset(26) && is_method("ACK")) 
            {
                xlog("L_INFO", "$ci|log|maintaining contact association to media server $fd");

                cache_store("memcached_callid_hash", "$tU ", "$fd", 3600);
            }
            
            xlog("L_INFO", "$ci|log|forwarding based on the route set");

            route(1);
        }
        else if ( is_method("ACK") )
        {
            if ( t_check_trans() )
            {
                # non loose-route, but stateful ACK; must be an ACK after
                # a 487 or e.g. 404 from upstream server
                xlog("L_INFO", "$ci|log|in dialog request belongs to a known transaction");

                route(1);
            }
            else
            {
                # ACK without matching transaction ->
                # ignore and discard
                xlog("L_NOTICE", "$ci|end|no matching transaction");

                exit;
            }
        }

        xlog("L_WARN", "$ci|end|could not route in dialog");

        sl_send_reply("486", "PC Load Letter");

        exit;
    }

    # CANCEL processing
    if (is_method("CANCEL"))
    {
        # If this cancel is part of a transaction
        # then pass it along to concerned parties
        if (t_check_trans())
        {
            xlog("L_INFO", "$ci|log|request belogs to a known transaction");

            route(1);
        }
        else
        {
            xlog("L_NOTICE", "$ci|end|no matching transaction");
        }

        exit;
    }

    # If this is a retransmission it will break/stop the script
    # and do standard processing of the message
    t_check_trans();

    # preloaded route checking
    if (loose_route())
    {
        if (!is_method("ACK"))
        {
            xlog("L_WARN", "$ci|end|initial request contained a preloaded route set");

            sl_send_reply("403", "Please leave the routing up to us");

            exit;
        }
    }

    if (is_method("REGISTER"))
    {
        if (!add_path_received())
        {
            xlog("L_ERR", "$ci|end|unable to add path");

            sl_send_reply("503", "Internal path befuddlement");

            exit;
        }

        xlog("L_INFO", "$ci|log|added path");
    }

    # is from media servers
    if (isflagset(26))
    {
        xlog("L_INFO", "$ci|log|originated from internal source");
    }
    # not from media severs has a contact uri and is in memcache
    else if ($ct.fields(uri) && cache_fetch("memcached_callid_hash", "$(ct.fields(uri){uri.user})", $avp(i:55))) 
    {
        $rd = $avp(i:55);
        
        xlog("L_INFO", "$ci|log|contact $(ct.fields(uri){uri.user}) is associated with media server");
    }
    # not from media servers and call id is in memcache
    else if (cache_fetch("memcached_callid_hash", "$ci", $avp(i:55)))
    {
        $rd = $avp(i:55);

        xlog("L_INFO", "$ci|log|call-id is associated with media server $rd");

        if ($ct.fields(uri) && is_method("INVITE")) 
        {
            xlog("L_INFO", "$ci|log|associated contact $(ct.fields(uri){uri.user}) with media server $rd");

            cache_store("memcached_callid_hash", "$(ct.fields(uri){uri.user})", "$rd", 3600);
        }
    }
    # not from media servers and no information in memcache
    else
    {
        ds_select_domain("1", "4");

        xlog("L_INFO", "$ci|log|routing call to arbitrary media server");
    }

    # record routing
    if (!is_method("REGISTER|MESSAGE"))
    {
        # Record the route that this request has taken
        # so we remain in the signaling path
        record_route();

        xlog("L_INFO", "$ci|log|added this server to the route set");
    }

    route(1);
}

route[1]
{
    route("nat_test_and_correct");   

    if ($(rd{ip.isip}) && (ds_is_in_list("$rd", "", "1") || ds_is_in_list("$rd", "", "2"))) 
    {
        remove_hf("X-AUTH-IP");

        append_hf("X-AUTH-IP: $si\r\n");

        t_on_reply("internal_reply");

        t_on_failure("internal_fault");
    }
    else
    {
        t_on_reply("external_reply");
    }

    if (!t_relay())
    {
        xlog("L_ERR", "$ci|end|unable to relay message");

        sl_reply_error();
    }
    else
    {
        xlog("L_INFO", "$ci|pass|$rd");
    }

    exit;
}

route[nat_test_and_correct]
{
    if (client_nat_test("3")) 
    {
        xlog("L_INFO", "$ci|log|via address differs from source or RFC1918 address in contact");

        force_rport();

        #xlog("L_INFO", "$ci|log|forced rport");

        fix_contact();

        #xlog("L_INFO", "$ci|log|fixed contact");
    }

    if (has_body("application/sdp") && nat_uac_test("8"))
    {
        xlog("L_INFO", "$ci|log|SDP contains a RFC1918 address");

        #xlog("L_INFO", "$ci|log|rewrite SDP connection data with source address");

        #xlog("L_INFO", "$ci|log|rewrite SDP origin with source address ");

        fix_nated_sdp("10");
    }
}

onreply_route[external_reply]
{
    xlog("L_INFO", "$ci|start|recieved external reply $rs $rr");
    xlog("L_INFO", "$ci|log|source $si:$sp");

    route("nat_test_and_correct");

    xlog("L_INFO", "$ci|pass|$(<request>si)");
}

onreply_route[internal_reply]
{
    xlog("L_INFO", "$ci|start|recieved internal reply $rs $rr");
    xlog("L_INFO", "$ci|log|source $si:$sp");

    route("nat_test_and_correct");

    if (t_check_status("(407)|(401)"))
    {
        cache_store("memcached_callid_hash", "$ci ", "$si", 60);

        xlog("L_INFO", "$ci|log|associated call-id with media server $si");
    }

    xlog("L_INFO", "$ci|pass|$(<request>si)");
}

failure_route[internal_fault]
{
    if (t_was_cancelled()) 
    {
        xlog("L_INFO", "$ci|end|transaction was cancelled");

        exit;
    }

    if (t_check_status("(408)|(5[0-9][0-9])"))
    {
        xlog("L_INFO", "$ci|start|recieved or generated negative reply $rm");
        xlog("L_INFO", "$ci|log|source $si:$sp");
        xlog("L_INFO", "$ci|log|status $rs");
        xlog("L_INFO", "$ci|log|reason $rr");

        xlog("L_ERR", "$ci|log|moving media server $rd to probing mode");

        ds_mark_dst("p");

        if(ds_select_domain("1", "4"))
        {
            xlog("L_INFO", "$ci|log|routing call to arbitrary media server");

            if ($ct.fields(uri) && is_method("INVITE")) 
            {
                xlog("L_INFO", "$ci|log|associated contact $(ct.fields(uri){uri.user}) with media server $rd");

                cache_store("memcached_callid_hash", "$(ct.fields(uri){uri.user})", "$rd", 3600);
            }
        }
    }
}
