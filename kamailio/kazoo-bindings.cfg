######## kazoo bindings ########
### use this simple form of binding a listener
### kazoo_subscribe("dialoginfo", "direct", "BLF-QUEUE-MY_HOSTNAME", "BLF-MY_HOSTNAME");
###
### or unleash the power of rabbit to kazoo-blf
###
### 'no_ack' : 1 => needs ack,
### 'wait_for_consumer_ack'
###    : 1 => when it receives, it processses on the AMQP Worker ad after that it confirms
###    : 0 => when it receives, it acks then processes in the AMQP Worker
###    only works if no_ack : 0
###
### Rabbit Policy for ha-mode
###  pattern : ^BLF
###  definition : ha-mode: all
###
###

include_file "kazoo-custom-bindings.cfg"

event_route[kazoo:mod-init]
{

    #!ifdef PRESENCE_ROLE
    route(PRESENCE_BINDINGS)
    #!endif

    #!ifdef PRESENCE_QUERY_ROLE
    route(PRESENCE_QUERY_BINDINGS)
    #!endif


    #!ifdef MESSAGE_ROLE
    route(MESSAGE_BINDINGS)
    #!endif

    #!ifdef REGISTRAR_ROLE
    route(REGISTRAR_BINDINGS)
    #!endif

    #!ifdef REGISTRAR_SYNC_ROLE
    route(REGISTRAR_SYNC_BINDINGS)
    #!endif

    #!ifdef NODES_SYNC_ROLE
    $var(payload) = "{ 'exchange' : 'nodes' , 'type' : 'fanout', 'queue' : 'NODES-MY_HOSTNAME', 'federate' : 1}";
    kazoo_subscribe("$var(payload)");
    #!endif

    #!ifdef ACL_ROLE
    $var(payload) = "{ 'exchange' : 'frontier_acl' , 'type' : 'topic', 'queue' : 'FRONTIERACL-FLUSH-MY_HOSTNAME', 'routing' : 'flush', 'auto_delete' : 1, 'durable' : 0, 'no_ack' : 1, 'wait_for_consumer_ack' : 0 }";
    kazoo_subscribe("$var(payload)");
    #!endif

}

event_route[kazoo:consumer-event]
{
    xlog("L_INFO","unhandled AMQP event, payload: $kzE\n");
}

event_route[kazoo:consumer-event-connection-open]
{
    xlog("L_INFO","connection to $(kzE{kz.json,host}) opened\n");
}

event_route[kazoo:consumer-event-connection-closed]
{
    xlog("L_INFO","connection to $(kzE{kz.json,host}) closed\n");
}

# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
